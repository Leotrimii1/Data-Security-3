import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        // Create the main window
        JFrame mainFrame = new JFrame("Cipher");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(400, 300);
        mainFrame.setLocationRelativeTo(null); // Center the window on the screen

        // Create the Caesar button
        JButton caesarButton = new JButton("Caesar");
        caesarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Create the Caesar window
                JFrame caesarFrame = new JFrame("Caesar Cipher");
                caesarFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only the Caesar window
                caesarFrame.setSize(300, 200);
                caesarFrame.setLocationRelativeTo(null); // Center the window on the screen

                // Create the Encrypt and Decrypt buttons
                JButton encryptButton = new JButton("Encrypt");
                JButton decryptButton = new JButton("Decrypt");

                encryptButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        // Create a file chooser dialog to select the file to encrypt
                        JFileChooser fileChooser = new JFileChooser();
                        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
                        int result = fileChooser.showOpenDialog(caesarFrame);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            // Get the selected file and create a new file to write the encrypted text to
                            File inputFile = fileChooser.getSelectedFile();
                            String outputFilePath = inputFile.getParent() + "/encrypted_" + inputFile.getName();
                            File outputFile = new File(outputFilePath);

                            try {
                                // Read the contents of the input file
                                FileInputStream inputStream = new FileInputStream(inputFile);
                                Scanner scanner = new Scanner(inputStream);
                                StringBuilder inputTextBuilder = new StringBuilder();
                                while (scanner.hasNextLine()) {
                                    inputTextBuilder.append(scanner.nextLine());
                                    inputTextBuilder.append("\n");
                                }
                                scanner.close();
                                inputStream.close();

                                // Encrypt the input text using the Caesar cipher algorithm
                                int shift = 3;
                                String inputText = inputTextBuilder.toString();
                                String encryptedText = caesarEncrypt(inputText, shift);

                                // Write the encrypted text to the output file
                                FileOutputStream outputStream = new FileOutputStream(outputFile);
                                outputStream.write(encryptedText.getBytes());
                                outputStream.close();

                                JOptionPane.showMessageDialog(caesarFrame, "File encrypted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(caesarFrame, "Error encrypting file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                });
                 // ActionListener for the Decrypt button
                decryptButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        // Create a file chooser dialog to select the file to decrypt
                        JFileChooser fileChooser = new JFileChooser();
                        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
                        int result = fileChooser.showOpenDialog(caesarFrame);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            // Ask the user for the shift value
                            String shiftInput = JOptionPane.showInputDialog(caesarFrame, "Enter the shift value:", "Shift", JOptionPane.PLAIN_MESSAGE);

                            // Try to parse the shift value as an integer
                            int shift;
                            try {
                                shift = Integer.parseInt(shiftInput);
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(caesarFrame, "Invalid shift value: " + shiftInput, "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }

                            // Get the selected file and create a new file to write the decrypted text to
                            File inputFile = fileChooser.getSelectedFile();
                            String outputFilePath = inputFile.getParent() + "/decrypted_" + inputFile.getName();
                            File outputFile = new File(outputFilePath);

                            try {
                                // Read the contents of the input file
                                FileInputStream inputStream = new FileInputStream(inputFile);
                                Scanner scanner = new Scanner(inputStream);
                                StringBuilder inputTextBuilder = new StringBuilder();
                                while (scanner.hasNextLine()) {
                                    inputTextBuilder.append(scanner.nextLine());
                                    inputTextBuilder.append("\n");
                                }
                                scanner.close();
                                inputStream.close();

                                // Decrypt the input text using the Caesar cipher algorithm
                                String encryptedText = inputTextBuilder.toString();
                                String decryptedText = caesarDecrypt(encryptedText, shift);

                                // Write the decrypted text to the output file
                                FileOutputStream outputStream = new FileOutputStream(outputFile);
                                outputStream.write(decryptedText.getBytes());
                                outputStream.close();

                                JOptionPane.showMessageDialog(caesarFrame, "File decrypted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(caesarFrame, "Error decrypting file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                });

                // Add the buttons to the Caesar window
                JPanel caesarPanel = new JPanel();
                caesarPanel.add(encryptButton);
                caesarPanel.add(decryptButton);
                caesarFrame.add(caesarPanel);

                // Show the Caesar window
                caesarFrame.setVisible(true);
            }
        });
 // Create the Vigenere button
        JButton vigenereButton = new JButton("Vigenere");
        vigenereButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Create the Caesar window
                JFrame vigenereFrame = new JFrame("Vigenere Cipher");
                vigenereFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only the Caesar window
                vigenereFrame.setSize(300, 200);
                vigenereFrame.setLocationRelativeTo(null); // Center the window on the screen

                // Create the Encrypt and Decrypt buttons
                JButton encryptButton = new JButton("Encrypt");
                JButton decryptButton = new JButton("Decrypt");

                // Add the buttons to the Caesar window
                JPanel vigenerePanel = new JPanel();
                vigenerePanel.add(encryptButton);
                vigenerePanel.add(decryptButton);
                vigenereFrame.add(vigenerePanel);

                // Show the Caesar window
                vigenereFrame.setVisible(true);

                // Add action listener to the Encrypt button
                encryptButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        // Create a file chooser dialog to select the file to encrypt
                        JFileChooser fileChooser = new JFileChooser();
                        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
                        int result = fileChooser.showOpenDialog(vigenereFrame);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            // Get the selected file and create a new file to write the encrypted text to
                            File inputFile = fileChooser.getSelectedFile();
                            String outputFilePath = inputFile.getParent() + "/encrypted_" + inputFile.getName();
                            File outputFile = new File(outputFilePath);

                            try {
                                // Read the contents of the input file
                                FileInputStream inputStream = new FileInputStream(inputFile);
                                Scanner scanner = new Scanner(inputStream);
                                StringBuilder inputTextBuilder = new StringBuilder();
                                while (scanner.hasNextLine()) {
                                    inputTextBuilder.append(scanner.nextLine());
                                    inputTextBuilder.append("\n");
                                }
                                scanner.close();
                                inputStream.close();

                                // Encrypt the input text using the Vigenere cipher
                                String inputText = inputTextBuilder.toString().trim();
                                String key = JOptionPane.showInputDialog(vigenereFrame, "Enter the encryption key:");
                                key = key.toUpperCase();
                                String encryptedText = vigenereEncrypt(inputText, key);

                                // Write the encrypted text to the output file
                                FileOutputStream outputStream = new FileOutputStream(outputFile);
                                outputStream.write(encryptedText.getBytes());
                                outputStream.close();

                                JOptionPane.showMessageDialog(vigenereFrame, "File encrypted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(vigenereFrame, "Error encrypting file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                });

                decryptButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        // Create a file chooser dialog to select the file to decrypt
                        JFileChooser fileChooser = new JFileChooser();
                        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
                        int result = fileChooser.showOpenDialog(vigenereFrame);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            // Get the selected file and create a new file to write the decrypted text to
                            File inputFile = fileChooser.getSelectedFile();
                            String outputFilePath = inputFile.getParent() + "/decrypted_" + inputFile.getName();
                            File outputFile = new File(outputFilePath);

                            try {
                                // Read the contents of the input file
                                FileInputStream inputStream = new FileInputStream(inputFile);
                                Scanner scanner = new Scanner(inputStream);
                                StringBuilder inputTextBuilder = new StringBuilder();
                                while (scanner.hasNextLine()) {
                                    inputTextBuilder.append(scanner.nextLine());
                                    inputTextBuilder.append("\n");
                                }
                                scanner.close();
                                inputStream.close();

                                // Decrypt the input text using the Vigenere cipher
                                String inputText = inputTextBuilder.toString().trim();
                                String key = JOptionPane.showInputDialog(vigenereFrame, "Enter the encryption key:");
                                key = key.toUpperCase();
                                String decryptedText = vigenereDecrypt(inputText, key);

                                // Write the decrypted text to the output file
                                FileOutputStream outputStream = new FileOutputStream(outputFile);
                                outputStream.write(decryptedText.getBytes());
                                outputStream.close();

                                JOptionPane.showMessageDialog(vigenereFrame, "File decrypted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(vigenereFrame, "Error decrypting file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                });

            }
        });


        // Add the buttons to the main window
        JPanel mainPanel = new JPanel();
        mainPanel.add(caesarButton);
        mainPanel.add(vigenereButton);
        mainFrame.add(mainPanel);

        // Show the main window
        mainFrame.setVisible(true);
    }
    
    public static String vigenereEncrypt(String text, String key) {
        String result = "";
        int keyIndex = 0;
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            char keyChar = Character.toUpperCase(key.charAt(keyIndex));
            if (c >= 'A' && c <= 'Z') {
                int shift = keyChar - 'A';
                c = (char) ('A' + (c - 'A' + shift) % 26);
                if (Character.isLowerCase(text.charAt(i))) {
                    c = Character.toLowerCase(c);
                }
                keyIndex = (keyIndex + 1) % key.length();
            } else if (c >= 'a' && c <= 'z') {
                int shift = keyChar - 'A';
                c = (char) ('a' + (c - 'a' + shift) % 26);
                if (Character.isUpperCase(text.charAt(i))) {
                    c = Character.toUpperCase(c);
                }
                keyIndex = (keyIndex + 1) % key.length();
            }
            result += c;
        }
        return result;
    }


    public static String vigenereDecrypt(String text, String key) {
        String result = "";
        int keyIndex = 0;
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (Character.isLetter(c)) {
                boolean isUpperCase = Character.isUpperCase(c);
                c = Character.toUpperCase(c);
                int shift = key.charAt(keyIndex) - 'A';
                c = (char) ('A' + (c - 'A' - shift + 26) % 26);
                if (!isUpperCase) {
                    c = Character.toLowerCase(c);
                }
                keyIndex = (keyIndex + 1) % key.length();
            }
            result += c;
        }
        return result;
    }

    public static String caesarEncrypt(String inputText, int shift) {
        StringBuilder encryptedTextBuilder = new StringBuilder();

        // Iterate over each character in the input text
        for (int i = 0; i < inputText.length(); i++) {
            char currentChar = inputText.charAt(i);

            // Apply the shift to the current character and append it to the encrypted text
            if (Character.isUpperCase(currentChar)) {
                char shiftedChar = (char) ((currentChar + shift - 'A') % 26 + 'A');
                encryptedTextBuilder.append(shiftedChar);
            } else if (Character.isLowerCase(currentChar)) {
                char shiftedChar = (char) ((currentChar + shift - 'a') % 26 + 'a');
                encryptedTextBuilder.append(shiftedChar);
            } else {
                encryptedTextBuilder.append(currentChar);
            }
        }

        return encryptedTextBuilder.toString();
    }

    public static String caesarDecrypt(String encryptedText, int shift) {
        StringBuilder decryptedTextBuilder = new StringBuilder();

        // Iterate over each character in the encrypted text
        for (int i = 0; i < encryptedText.length(); i++) {
            char currentChar = encryptedText.charAt(i);

            // Apply the reverse shift to the current character and append it to the decrypted text
            if (Character.isUpperCase(currentChar)) {
                char shiftedChar = (char) ((currentChar - shift - 'A' + 26) % 26 + 'A');
                decryptedTextBuilder.append(shiftedChar);
            } else if (Character.isLowerCase(currentChar)) {
                char shiftedChar = (char) ((currentChar - shift - 'a' + 26) % 26 + 'a');
                decryptedTextBuilder.append(shiftedChar);
            } else {
                decryptedTextBuilder.append(currentChar);
            }
        }

        return decryptedTextBuilder.toString();
    }

}
